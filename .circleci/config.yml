defaults: &defaults
  working_directory: /go/src/github.com/danackerson/digitalocean
  docker:
    - image: golang:1.8

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - deploy:
          name: Setup new server at Digital Ocean
          command: |
            set -eu
            go get -t -d -v ./...
            go build -o /tmp/do do.go
            cp ./set_env.sh /tmp
            ./tmp/set_env.sh
            ./tmp/do -fn=createNewServer
      - persist_to_workspace:
          root: /tmp
  update_dns:
    <<: *defaults
    steps:
      - add-ssh-keys:
          fingerprints:
            - "93:c4:61:21:a6:82:d8:6d:4f:73:11:79:37:23:83:07"
      - run:
          name: Start ssh-agent
          command: |
            ssh-agent -s > ~/.ssh_agent_conf
            source ~/.ssh_agent_conf
            for _k in $(ls ${HOME}/.ssh/id_*); do
              ssh-add ${_k} || true
            done
      - attach_workspace:
          at: /tmp
      - run:
          name: Update DNS entry & SSL cert for ackerson.de
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              ./tmp/set_env.sh
              source /tmp/new_digital_ocean_droplet_params
              ./tmp/do -fn=updateDNS -dropletID=$NEW_DROPLET_ID
              source ~/.ssh_agent_conf
              ssh -o "StrictHostKeyChecking no" $deployUser@$NEW_SERVER_IPV4 docker run -d --name letsencrypt --volumes-from ackerson.de quay.io/letsencrypt/letsencrypt certonly --non-interactive --text --agree-tos --webroot --no-eff-email --webroot-path /app/public -m dan@ackerson.de -d ackerson.de
              ssh -o "StrictHostKeyChecking no" $deployUser@$NEW_SERVER_IPV4 sleep 30
              ssh -o "StrictHostKeyChecking no" $deployUser@$NEW_SERVER_IPV4 docker cp letsencrypt:/etc/letsencrypt/ ./letsencrypt
              ssh -o "StrictHostKeyChecking no" $deployUser@$NEW_SERVER_IPV4 sudo cp ./letsencrypt/archive/ackerson.de/fullchain1.pem /home/ackersond/certs/server.pem
              ssh -o "StrictHostKeyChecking no" $deployUser@$NEW_SERVER_IPV4 sudo cp ./letsencrypt/archive/ackerson.de/privkey1.pem /home/ackersond/certs/server.key
              ssh -o "StrictHostKeyChecking no" $deployUser@$NEW_SERVER_IPV4 docker rm -f letsencrypt
              ssh -o "StrictHostKeyChecking no" $deployUser@$NEW_SERVER_IPV4 docker restart ackerson.de
            fi
  build_deploy_ackersonde:
    steps:
      <<: *defaults
      - attach_workspace:
          at: /tmp
      - run:
          name: Build & deploy ackerson.de
          command: |
            source /tmp/new_digital_ocean_droplet_params
            echo "ackersonDE: IPV4 of new server: $NEW_SERVER_IPV4"
            curl --user ${CIRCLE_API_TOKEN}: \
              --data build_parameters[DEPLOY_SERVER_IP]=$NEW_SERVER_IPV4 \
              https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/ackerson.de-go/tree/master
  build_deploy_bender_slackbot:
    steps:
      <<: *defaults
      - attach_workspace:
          at: /tmp
      - run:
          name: Build & deploy bender bot
          command: |
            source /tmp/new_digital_ocean_droplet_params
            echo "benderBot: IPV4 of new server: $NEW_SERVER_IPV4"
            curl --user ${CIRCLE_API_TOKEN}: \
              --data build_parameters[DEPLOY_SERVER_IP]=$NEW_SERVER_IPV4 \
              https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/bender-slackbot/tree/master
workflows:
version: 2
build_accept_deploy:
  jobs:
    - build:
    - build_deploy_ackersonde:
        requires:
          - build
    - build_deploy_bender_slackbot:
        requires:
          - build
    - update_dns:
        requires:
          - build_deploy_ackersonde
