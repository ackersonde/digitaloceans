name: Deploy DigitalOcean Droplet

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Build application
        env:
          CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN: ${{ secrets.CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN }}
          CTX_DIGITALOCEAN_FIREWALL: ${{ secrets.CTX_DIGITALOCEAN_FIREWALL }}
          CTX_SSH_DEPLOY_FINGERPRINT: ${{ secrets.CTX_SSH_DEPLOY_FINGERPRINT }}
          CTX_RASPBERRYPI_SSH_PRIVKEY: "${{ secrets.CTX_RASPBERRYPI_SSH_PRIVKEY }}"
        run: |
          go get -t -d -v ./...
          go build do.go

          envsubst < do_ubuntu_userdata.sh > digitalocean_ubuntu_userdata.sh
          mkdir ~/.ssh
          ./do -fn=createNewServer

          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          echo PUBLIC_IP=${public_ip_address} >> /tmp/new_digital_ocean_droplet_params
          source /tmp/new_digital_ocean_droplet_params

          ./do -fn=firewallSSH -allow=true -ip=$public_ip_address
          sleep 30

          # TODO: deploy traefik to droplet
          scp -o StrictHostKeyChecking=no go.sum root@$NEW_SERVER_IPV4:~/

          # Use LetsEncrypt staging server
          # --certificatesResolvers.sample.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory

          # TODO: update DNS entries of monitor.ackerson.de w/ IPV4 & IPV6 addrs
          # TODO: kick off deploys of homepage, benderbot, telegrambot ?

          # Cleanup TODO: put in if: always() block!
          ./do -fn=firewallSSH -allow=false -ip=$public_ip_address
          rm digitalocean_ubuntu_userdata.sh ~/.ssh/id_rsa /tmp/new_digital_ocean_droplet_params
