name: Deploy DigitalOcean Droplet

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      ca_pub_fingerprint:
        description: fingerprint of CA signed user cert
        required: false

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Build application
        env:
          CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN: ${{ secrets.CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN }}
          CTX_DIGITALOCEAN_FIREWALL: ${{ secrets.CTX_DIGITALOCEAN_FIREWALL }}
          CTX_SSH_DEPLOY_FINGERPRINT: ${{ secrets.CTX_SSH_DEPLOY_FINGERPRINT }}
          CTX_SERVER_DEPLOY_CACERT_B64: ${{ secrets.CTX_SERVER_DEPLOY_CACERT_B64 }}
          CTX_SERVER_DEPLOY_SECRET_B64: ${{ secrets.CTX_SERVER_DEPLOY_SECRET_B64 }}
          ACME_JSON: ${{ secrets.CTX_ACME_JSON }}
          CTX_BUILD_HOST: ${{ secrets.CTX_IPV6_BUILD_HOME }}
          CTX_MASTER_HOST: ${{ secrets.CTX_IPV6_MASTER_HOME }}
          CTX_SLAVE_HOST: ${{ secrets.CTX_IPV6_SLAVE_HOME }}
        run: |
          go get -t -d -v ./...
          go build do.go

          envsubst < do_ubuntu_userdata.sh > digitalocean_ubuntu_userdata.sh
          mkdir ~/.ssh
          ./do -fn=createNewServer -tag=traefik

          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          source /tmp/new_digital_ocean_droplet_params

          ./do -fn=firewallSSH -allow=true -ip=$public_ip_address
          sleep 30 # wait for instance to launch and provide ssh

          # prepare SSL certificate
          ssh -o StrictHostKeyChecking=no root@$NEW_SERVER_IPV4 "\
            mkdir -p traefik/logs || true"

          # deploy traefik to droplet - sleep here is to let cloudinit finish
          ssh root@$NEW_SERVER_IPV4 "\
            sleep 100 && \
            docker rm -f traefik || true && \
            docker run -d --restart=always \
              -e DO_AUTH_TOKEN=${{ secrets.CTX_DIGITALOCEAN_TOKEN }} \
              -v /var/run/docker.sock:/var/run/docker.sock:ro \
              -v ~/traefik/logs:/var/log/traefik/ \
              -v ~/traefik/acme.json:/acme.json \
              --label='traefik.enable=true' \
              --label='traefik.http.middlewares.api_auth.basicauth.users=${{ secrets.CTX_BASIC_AUTH_USER }}:${{ secrets.CTX_BASIC_AUTH_PASSWD }}' \
              --label='traefik.http.routers.api.entrypoints=web,secure' \
              --label='traefik.http.routers.api.middlewares=api_auth' \
              --label='traefik.http.routers.api.rule=Host(\`monitor.ackerson.de\`)' \
              --label='traefik.http.routers.api.service=api@internal' \
              --label='traefik.http.routers.api.tls.certResolver=letsencrypt' \
              --label='traefik.http.routers.api.tls.domains=monitor.ackerson.de' \
              --label='traefik.http.routers.https-redirect.rule=HostRegexp(\`{any:.*}\`)' \
              --label='traefik.http.routers.https-redirect.middlewares=https-redirect@docker' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.scheme=https' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.permanent=true' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.port=443' \
              -p 80:80 -p 443:443 --name traefik traefik:2.4 \
              --accesslog.filepath=/var/log/traefik/access.log \
              --log.filepath=/var/log/traefik/traefik.log --log.level=WARN \
              --api --providers.docker --providers.docker.exposedByDefault=false \
              --entrypoints.web.address=:80 --entrypoints.secure.address=:443 \
              --certificatesResolvers.letsencrypt.acme.email=dan@ackerson.de \
              --certificatesResolvers.letsencrypt.acme.storage=acme.json \
              --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=digitalocean \
              --certificatesResolvers.letsencrypt.acme.dnsChallenge.delayBeforeCheck=5"

          # add firewall rules for new server (and cut outgoing one)
          envsubst < firewall_rules.sh > fw_rules.sh
          scp -o StrictHostKeyChecking=no fw_rules.sh root@ackerson.de
          cat ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no root@ackerson.de ./fw_rules.sh

          ./do -fn=updateDNS -dropletID=$NEW_DROPLET_ID
          ./do -fn=firewallSSH -allow=false -ip=$public_ip_address -keyID=$NEW_SSH_KEY_ID
          ./do -fn=deleteServer -dropletID=$OLD_DROPLET_ID
          sleep 30 # DNS update above

          # kick off deploys of homepage, bender, telegram-bot
          curl -X POST -u "${{secrets.CTX_GITHUB_PERSONAL_ACCESS_USERNAME }}:${{secrets.CTX_GITHUB_PERSONAL_ACCESS_TOKEN}}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ackersonde/ackerson.de-go/actions/workflows/build.yml/dispatches \
            -d '{"ref":"master"}'
          curl -X POST -u "${{secrets.CTX_GITHUB_PERSONAL_ACCESS_USERNAME}}:${{secrets.CTX_GITHUB_PERSONAL_ACCESS_TOKEN}}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ackersonde/bender-slackbot/actions/workflows/build.yml/dispatches \
            -d '{"ref":"master"}'
          curl -X POST -u "${{secrets.CTX_GITHUB_PERSONAL_ACCESS_USERNAME}}:${{secrets.CTX_GITHUB_PERSONAL_ACCESS_TOKEN}}"
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ackersonde/telegram-bot/actions/workflows/build.yml/dispatches \
            -d '{"ref":"main"}'

          rm digitalocean_ubuntu_userdata.sh ~/.ssh/id_rsa /tmp/new_digital_ocean_droplet_params

          curl -s -o /dev/null -X POST -d token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID | $GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage
