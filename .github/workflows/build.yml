name: Deploy DigitalOcean Droplet

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      ca_pub_fingerprint:
        description: fingerprint of CA signed user cert
        required: false

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - uses: actions/setup-go@v2
      - name: Build application
        env:
          CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN: ${{ secrets.CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN }}
          CTX_DIGITALOCEAN_FIREWALL: ${{ secrets.CTX_DIGITALOCEAN_FIREWALL }}
          CTX_SSH_DEPLOY_FINGERPRINT: ${{ secrets.CTX_SSH_DEPLOY_FINGERPRINT }}
          CTX_ACKDE_HOST_SSH_KEY_PUB_B64: ${{ secrets.CTX_ACKDE_HOST_SSH_KEY_PUB_B64 }}
          CTX_ACKDE_HOST_SSH_KEY_PRIV_B64: ${{ secrets.CTX_ACKDE_HOST_SSH_KEY_PRIV_B64 }}
          CTX_SERVER_DEPLOY_CACERT_B64: ${{ secrets.CTX_SERVER_DEPLOY_CACERT_B64 }}
          CTX_SERVER_DEPLOY_SECRET_B64: ${{ secrets.CTX_SERVER_DEPLOY_SECRET_B64 }}
          CTX_SERVER_DEPLOY_PUBLIC_B64: ${{ secrets.CTX_SERVER_DEPLOY_PUBLIC_B64 }}
          ACME_JSON: ${{ secrets.CTX_ACME_JSON }}
          SYNCTHING_CONFIG: ${{ secrets.SYNCTHING_CONFIG }}
          SYNCTHING_KEY: ${{ secrets.SYNCTHING_KEY }}
          SYNCTHING_CERT: ${{ secrets.SYNCTHING_CERT }}
          CTX_MASTER_HOST: ${{ secrets.CTX_IPV6_MASTER_HOME }}
          CTX_BUILD_HOST: ${{ secrets.CTX_IPV6_BUILD_HOME }}
          CTX_SLAVE_HOST: ${{ secrets.CTX_IPV6_SLAVE_HOME }}
          SERVERS: "ubuntu@$CTX_MASTER_HOST ubuntu@$CTX_SLAVE_HOST ackersond@$CTX_BUILD_HOST"
          GITHUB_APP_CLIENT_ID: ${{ secrets.CTX_GITHUB_APP_CLIENT_ID }}
          GITHUB_INSTALL_ID: ${{ secrets.CTX_GITHUB_INSTALL_ID }}
          GITHUB_SECRETS_PK_PEM: ${{ secrets.CTX_GITHUB_SECRETS_PK_PEM }}
        run: |
          go get -t -d -v ./...
          go build do.go

          envsubst '${CTX_ACKDE_HOST_SSH_KEY_PRIV_B64} ${CTX_ACKDE_HOST_SSH_KEY_PUB_B64} ${CTX_SERVER_DEPLOY_CACERT_B64} ${CTX_SERVER_DEPLOY_SECRET_B64} ${CTX_SERVER_DEPLOY_PUBLIC_B64} ${ACME_JSON} ${SYNCTHING_CONFIG} ${SYNCTHING_KEY} ${SYNCTHING_CERT}' < scripts/do_ubuntu_userdata.sh > digitalocean_ubuntu_userdata.sh

          mkdir ~/.ssh # for new RSA key created in next step
          ./do -fn=createNewServer -tag=traefik

          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          source /tmp/new_digital_ocean_droplet_params

          ./do -fn=firewallSSH -allow=true -ip=$public_ip_address
          sleep 30 # wait for instance to launch w/ ssh

          # prepare Traefik directory
          ssh -o StrictHostKeyChecking=no root@$NEW_SERVER_IPV4 "\
            mkdir -p traefik/logs &&
            cloud-init status --wait > /dev/null 2>&1
            [ $? -ne 0 ] && echo 'Cloud-init failed' && exit 1
            echo 'Cloud-init succeeded at ' `date -R`  > ~/post-cloud-init.log"

          # Cloud-init setup new host keys - let's ditch the orig ones
          ssh-keygen -f "/home/runner/.ssh/known_hosts" -R $NEW_SERVER_IPV4

          scp -o StrictHostKeyChecking=no scripts/dynamic_conf.yml root@$NEW_SERVER_IPV4:~/traefik/

          # deploy traefik to droplet - sleep here is to let cloudinit finish
          ssh root@$NEW_SERVER_IPV4 "\
            docker run -d --restart=always \
              -e DO_AUTH_TOKEN=${{ secrets.CTX_DIGITALOCEAN_DNS_TOKEN }} \
              -v /var/run/docker.sock:/var/run/docker.sock:ro \
              -v ~/traefik/logs:/var/log/traefik/ \
              -v ~/traefik/acme.json:/acme.json \
              -v ~/traefik/dynamic_conf.yml:/dynamic_conf.yml \
              --label='traefik.enable=true' \
              --label='traefik.http.middlewares.api_auth.basicauth.users=${{ secrets.CTX_BASIC_AUTH_USER }}:${{ secrets.CTX_BASIC_AUTH_PASSWD }}' \
              --label='traefik.http.routers.api.entrypoints=web,secure' \
              --label='traefik.http.routers.api.middlewares=secHeaders@file,api_auth' \
              --label='traefik.http.routers.api.rule=Host(\`monitor.ackerson.de\`)' \
              --label='traefik.http.routers.api.service=api@internal' \
              --label='traefik.http.routers.api.tls.certResolver=letsencrypt' \
              --label='traefik.http.routers.api.tls.domains=monitor.ackerson.de' \
              --label='traefik.http.routers.https-redirect.rule=HostRegexp(\`{any:.*}\`)' \
              --label='traefik.http.routers.https-redirect.middlewares=https-redirect@docker' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.scheme=https' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.permanent=true' \
              --label='traefik.http.middlewares.https-redirect.redirectscheme.port=443' \
              -p 80:80 -p 443:443 --name traefik traefik:2.4 \
              --accesslog.filepath=/var/log/traefik/access.log \
              --log.filepath=/var/log/traefik/traefik.log --log.level=WARN \
              --api --providers.docker.exposedByDefault=false --providers.file.filename=/dynamic_conf.yml \
              --entrypoints.web.address=:80 --entrypoints.secure.address=:443 \
              --certificatesResolvers.letsencrypt.acme.email=dan@ackerson.de \
              --certificatesResolvers.letsencrypt.acme.storage=acme.json \
              --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=digitalocean \
              --certificatesResolvers.letsencrypt.acme.dnsChallenge.delayBeforeCheck=5 && \
            docker run -d --restart=always \
              -v /root/syncthing:/var/syncthing --hostname=${{ secrets.SYNCTHING_HOSTNAME }} \
              --label='traefik.enable=true' \
              --label='traefik.http.routers.syncthing.tls.certResolver=letsencrypt' \
              --label='traefik.http.routers.syncthing.tls.domains=${{ secrets.SYNCTHING_HOSTNAME }}' \
              --label='traefik.http.routers.syncthing.rule=Host(\`${{ secrets.SYNCTHING_HOSTNAME }}\`)' \
              --label='traefik.http.routers.syncthing.middlewares=secHeaders@file,api_auth' \
              --label='traefik.http.routers.syncthing.service=syncthing-svc' \
              --label='traefik.http.services.syncthing-svc.loadbalancer.server.port=8384' \
              -p 8384:8384 -p 22000:22000/tcp -p 22000:22000/udp --name syncthing syncthing/syncthing:latest"

          # New server is up and running - prepare the old one for death
          # retrieve current deployment priv key
          cat <<EOF >~/.ssh/id_rsa_old
          ${{ secrets.CTX_DIGITALOCEAN_SSH_PRIVKEY }}
          EOF
          chmod 400 ~/.ssh/id_rsa_old

          # Use existing server to update new firewall rules for home network
          envsubst '${CTX_MASTER_HOST} ${CTX_SLAVE_HOST} ${CTX_BUILD_HOST} ${NEW_SERVER_IPV6} ${OLD_SERVER_IPV6}' < scripts/firewall_rules.sh > fw_rules.sh
          if scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa_old fw_rules.sh root@ackerson.de:~/ ; then
            if ! ssh -i ~/.ssh/id_rsa_old root@ackerson.de /bin/bash /root/fw_rules.sh ; then
              curl -s -o /dev/null -X POST -d token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -d channel=C092UE0H4 \
                -d text="Failed to update firewall rules: ${OLD_SERVER_IPV6} => ${NEW_SERVER_IPV6}" \
                https://slack.com/api/chat.postMessage
            fi
          else
            curl -s -o /dev/null -X POST -d token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -d channel=C092UE0H4 \
              -d text="Unable to reach ackerson.de => Perhaps this is first run?" \
              https://slack.com/api/chat.postMessage
          fi

          # update PRIVKEY to new one for subsequent deployments
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
          python scripts/update_github_secret.py --name CTX_DIGITALOCEAN_SSH_PRIVKEY -f ~/.ssh/id_rsa

          # perform final cleanup
          ./do -fn=updateDNS -dropletID=$NEW_DROPLET_ID
          ./do -fn=firewallSSH -allow=false -ip=$public_ip_address
          ./do -fn=deleteServer -dropletID=$OLD_DROPLET_ID
          ./do -fn=deleteSSHKey -sshKeyID=$DEPLOY_KEY_ID

          # Redeploy homepage, bender, telegram-bot to new server
          curl -Ss -X POST -u "${{secrets.CTX_GITHUB_PERSONAL_ACCESS_USERNAME }}:${{secrets.CTX_GITHUB_PERSONAL_ACCESS_TOKEN}}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ackersonde/ackerson.de-go/actions/workflows/build.yml/dispatches \
            -d '{"ref":"master"}'
          curl -Ss -X POST -u "${{secrets.CTX_GITHUB_PERSONAL_ACCESS_USERNAME}}:${{secrets.CTX_GITHUB_PERSONAL_ACCESS_TOKEN}}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ackersonde/bender-slackbot/actions/workflows/build.yml/dispatches \
            -d '{"ref":"master"}'
          curl -Ss -X POST -u "${{secrets.CTX_GITHUB_PERSONAL_ACCESS_USERNAME}}:${{secrets.CTX_GITHUB_PERSONAL_ACCESS_TOKEN}}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ackersonde/telegram-bot/actions/workflows/build.yml/dispatches \
            -d '{"ref":"main"}'

          rm digitalocean_ubuntu_userdata.sh ~/.ssh/* /tmp/new_digital_ocean_droplet_params

          curl -s -o /dev/null -X POST -d token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID | $GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage
